@using CMS.MediaLibrary
@using CMS.SiteProvider;
@using FY19.Models.Widgets
@using FY19.Models.InlineEditors
@using System.Text.RegularExpressions;

@model ComponentViewModel<KMJ_DownloadItemProperties>

@{
    string url = string.Empty;
    if (Model.Properties.Url != null)
    {
        url = Model.Properties.Url.Contains("https://") ? "href=" + Model.Properties.Url : "href=https://" + Model.Properties.Url;
    }

    string newIcon = string.Empty;
    if (Model.Properties.NewIcon == "display")
    {
        newIcon = "catalog-row__col__img--new";
    }
    else
    {
        newIcon = string.Empty;
    }

    string imgSrc = string.Empty;

    if (Model.Properties.Image != null)
    {
        imgSrc = Url.Content(MediaLibraryHelper.GetDirectUrl(MediaFileInfoProvider.GetMediaFileInfo(Model.Properties.Image.FirstOrDefault().FileGuid, SiteContext.CurrentSiteName)));
    }

    string tBlank = string.Empty;

    if (Model.Properties.Url == null)
    {
        tBlank = "target = _blank";
    }

    string contentText = string.Empty;
    if (Model.Properties.ContentText != null)
    {
        contentText = Model.Properties.ContentText;
    }
}


@functions
{
    private static string HtmlToPlainText(string html)
    {
        const string tagWhiteSpace = @"(>|$)(\W|\n|\r)+<";//matches one or more (white space or line breaks) between '>' and '<'
        const string stripFormatting = @"<[^>]*(>|$)";//match any character between '<' and '>', even when end tag is missing
        const string lineBreak = @"<(br|BR)\s{0,1}\/{0,1}>";//matches: <br>,<br/>,<br />,<BR>,<BR/>,<BR />
        var lineBreakRegex = new Regex(lineBreak, RegexOptions.Multiline);
        var stripFormattingRegex = new Regex(stripFormatting, RegexOptions.Multiline);
        var tagWhiteSpaceRegex = new Regex(tagWhiteSpace, RegexOptions.Multiline);

        var text = html;
        //Decode html specific characters
        text = System.Net.WebUtility.HtmlDecode(text);
        //Remove tag whitespace/line breaks
        text = tagWhiteSpaceRegex.Replace(text, "><");
        //Replace <br /> with line breaks
        text = lineBreakRegex.Replace(text, Environment.NewLine);
        //Strip formatting
        text = stripFormattingRegex.Replace(text, string.Empty);

        return text;
    }
}


<div class="catalog-row__col">
    <a @url class="catalog-row__col__img @if(Model.Properties.NewIcon == "display"){ @newIcon } " @tBlank><img src="@imgSrc" alt="" class="center-block img-responsive" style="max-height: 170px;"></a>
    <p class="catalog-row__col__ttl">@Model.Properties.Title</p>
    <p class="catalog-row__col__txt">@Html.Raw(HttpUtility.HtmlDecode(contentText.Replace(Environment.NewLine, "<br/>")))</p>
    <p class="catalog-row__col__btn"><a @url @tBlank>ダウンロードはこちら</a></p>
    <!--/catalog-row__col-->
</div>