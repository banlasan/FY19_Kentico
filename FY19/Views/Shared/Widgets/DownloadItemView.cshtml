@using CMS.MediaLibrary
@using CMS.SiteProvider;
@using FY19.Models.Widgets
@using FY19.Models.InlineEditors
@using System.Text.RegularExpressions;

@model ComponentViewModel<KMJ_DownloadItemProperties>

@{
    //string classEx = string.Empty;
    //if (Model.NewIcon == "Display")
    //{
    //    classEx = "catalog-row__col__img--new";
    //}

    //string styleAttribute = null;
    //if (Model.Properties.Image != null)
    //{
    //    styleAttribute = $"style=\"background-image: url('{Url.Content(MediaLibraryHelper.GetDirectUrl(Model.Properties.Image))}');\"";
    //}

    string url = string.Empty;
    if (Model.Properties.Url != null)
    {
        string tmpUrl = HtmlToPlainText(Model.Properties.Url);
        url = tmpUrl.Length > 1000 ? tmpUrl.Substring(0, 1000) : tmpUrl;
    }

    string newIcon = string.Empty;
    if (Model.Properties.NewIcon == "Display")
    {
        newIcon = "catalog-row__col__img--new";
    }
    else
    {
        newIcon = string.Empty;
    }

    string imgSrc = string.Empty;

    if (Model.Properties.Image != null)
    {
        imgSrc = Url.Content(MediaLibraryHelper.GetDirectUrl(MediaFileInfoProvider.GetMediaFileInfo(Model.Properties.Image.FirstOrDefault().FileGuid, SiteContext.CurrentSiteName)));
    }
}


@functions
{
    private static string HtmlToPlainText(string html)
    {
        const string tagWhiteSpace = @"(>|$)(\W|\n|\r)+<";//matches one or more (white space or line breaks) between '>' and '<'
        const string stripFormatting = @"<[^>]*(>|$)";//match any character between '<' and '>', even when end tag is missing
        const string lineBreak = @"<(br|BR)\s{0,1}\/{0,1}>";//matches: <br>,<br/>,<br />,<BR>,<BR/>,<BR />
        var lineBreakRegex = new Regex(lineBreak, RegexOptions.Multiline);
        var stripFormattingRegex = new Regex(stripFormatting, RegexOptions.Multiline);
        var tagWhiteSpaceRegex = new Regex(tagWhiteSpace, RegexOptions.Multiline);

        var text = html;
        //Decode html specific characters
        text = System.Net.WebUtility.HtmlDecode(text);
        //Remove tag whitespace/line breaks
        text = tagWhiteSpaceRegex.Replace(text, "><");
        //Replace <br /> with line breaks
        text = lineBreakRegex.Replace(text, Environment.NewLine);
        //Strip formatting
        text = stripFormattingRegex.Replace(text, string.Empty);

        return text;
    }
}

@*@if (Context.Kentico().PageBuilder().EditMode)
    {
        Html.RenderPartial("InlineEditors/ImageUploaderEditor", new ImageUploaderEditorViewModel
        {
            ImageType = ImageTypeEnum.MediaFile,
            PropertyName = nameof(KMJ_DownloadItemProperties.Image),
            HasImage = Model.Image != null,
            MessagePosition = PanelPositionEnum.Top,
            UseAbsolutePosition = true
        });
    }*@

<div class="catalog-row__col">
    <a href="@url" class="catalog-row__col__img @if (Model.Properties.NewIcon == "display") { @newIcon } " target="_blank">
        @if (Context.Kentico().PageBuilder().EditMode)
        {
            Html.RenderPartial("InlineEditors/ImageUploaderEditor", new ImageUploaderEditorViewModel
            {
                PropertyName = nameof(ImageWidgetProperties.ImageGuid),
                HasImage = Model.Properties.Image != null
            });
        }
        else
        {
            <img src="@imgSrc" alt="" class="center-block img-responsive">
        }

        @*@Html.AttachmentImage(Model.Properties.ImageAttachment, cssClassName: "img-responsive")*@
    </a>
    <p class="catalog-row__col__ttl">
        @if (Context.Kentico().PageBuilder().EditMode)
        {
            Html.RenderPartial("InlineEditors/TextEditor", new TextEditorViewModel
            {
                PropertyName = nameof(KMJ_DownloadItemProperties.Title),
                Text = Model.Properties.Title,
                EnableFormatting = false
            });
        }
        else
        {
            @Html.Raw(Model.Properties.Title)
        }
    </p>
    <p class="catalog-row__col__txt">
        @if (Context.Kentico().PageBuilder().EditMode)
        {
            Html.RenderPartial("InlineEditors/TextEditor", new TextEditorViewModel
            {
                PropertyName = nameof(KMJ_DownloadItemProperties.ContentText),
                Text = Model.Properties.ContentText,
                EnableFormatting = false
            });
        }
        else
        {
            @Html.Raw(Model.Properties.ContentText)
        }
    </p>
    <p class="catalog-row__col__btn">
        <a href="@url" target="_blank">
            @if (Context.Kentico().PageBuilder().EditMode)
            {
                Html.RenderPartial("InlineEditors/TextEditor", new TextEditorViewModel
                {
                    PropertyName = nameof(KMJ_DownloadItemProperties.Url),
                    Text = url,
                    EnableFormatting = false
                });
            }
            else
            {
                @HtmlToPlainText(url)
            }
        </a>
    </p>
    <!--/catalog-row__col-->
</div>