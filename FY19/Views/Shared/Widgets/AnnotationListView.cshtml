@using Kentico.PageBuilder.Web.Mvc
@using FY19.Models.Widgets
@using FY19.Models.InlineEditors
@using System.Text.RegularExpressions;
@model ComponentViewModel<KMJ_AnnotationListProperties>


@functions
{
    private static string HtmlToPlainText(string html)
    {
        const string tagWhiteSpace = @"(>|$)(\W|\n|\r)+<";//matches one or more (white space or line breaks) between '>' and '<'
        const string stripFormatting = @"<[^>]*(>|$)";//match any character between '<' and '>', even when end tag is missing
        const string lineBreak = @"<(br|BR)\s{0,1}\/{0,1}>";//matches: <br>,<br/>,<br />,<BR>,<BR/>,<BR />
        var lineBreakRegex = new Regex(lineBreak, RegexOptions.Multiline);
        var stripFormattingRegex = new Regex(stripFormatting, RegexOptions.Multiline);
        var tagWhiteSpaceRegex = new Regex(tagWhiteSpace, RegexOptions.Multiline);

        var text = html;
        //Decode html specific characters
        text = System.Net.WebUtility.HtmlDecode(text);
        //Remove tag whitespace/line breaks
        text = tagWhiteSpaceRegex.Replace(text, "><");
        //Replace <br /> with line breaks
        text = lineBreakRegex.Replace(text, Environment.NewLine);
        //Strip formatting
        text = stripFormattingRegex.Replace(text, string.Empty);

        return text;
    }
}

@{
    string leftFootClass = string.Empty;
    string text1 = "test", text2 = string.Empty, text3 = string.Empty, text4 = string.Empty, text5 = string.Empty, text6 = string.Empty, text7 = string.Empty, text8 = string.Empty, text9 = string.Empty, text10 = string.Empty;

    if (Model.Properties.Count == "None")
    { leftFootClass = "listFootNote001"; }
    else
    { leftFootClass = "listFootNote002"; }

    if (Model.Properties.Text1 != null)
    { text1 = HtmlToPlainText(Model.Properties.Text1.Replace("※", string.Empty)); }
    else { text1 = Model.Properties.Text1; }

    if (Model.Properties.Text2 != null)
    { text2 = HtmlToPlainText(Model.Properties.Text2.Replace("※", string.Empty)); }
    else { text2 = Model.Properties.Text2; }

    if (Model.Properties.Text3 != null)
    { text3 = HtmlToPlainText(Model.Properties.Text3.Replace("※", string.Empty)); }
    else { text3 = Model.Properties.Text3; }

    if (Model.Properties.Text4 != null)
    { text4 = HtmlToPlainText(Model.Properties.Text4.Replace("※", string.Empty)); }
    else { text4 = Model.Properties.Text4; }

    if (Model.Properties.Text5 != null)
    { text5 = HtmlToPlainText(Model.Properties.Text5.Replace("※", string.Empty)); }
    else { text5 = Model.Properties.Text5; }

    if (Model.Properties.Text6 != null)
    { text6 = HtmlToPlainText(Model.Properties.Text6.Replace("※", string.Empty)); }
    else { text6 = Model.Properties.Text6; }

    if (Model.Properties.Text7 != null)
    { text7 = HtmlToPlainText(Model.Properties.Text7.Replace("※", string.Empty)); }
    else { text7 = Model.Properties.Text7; }

    if (Model.Properties.Text8 != null)
    { text8 = HtmlToPlainText(Model.Properties.Text8.Replace("※", string.Empty)); }
    else { text8 = Model.Properties.Text8; }

    if (Model.Properties.Text9 != null)
    { text9 = HtmlToPlainText(Model.Properties.Text9.Replace("※", string.Empty)); }
    else { text9 = Model.Properties.Text9; }

    if (Model.Properties.Text10 != null)
    { text10 = HtmlToPlainText(Model.Properties.Text10.Replace("※", string.Empty)); }
    else { text10 = Model.Properties.Text10; }
}

@if (Context.Kentico().PageBuilder().EditMode)
{
    <div style="height: 50px; font-weight: bold">
        <p>Annotation List Widget:</p>
    </div>

    Html.RenderPartial("InlineEditors/TextEditor", new TextEditorViewModel
    {
        PropertyName = "Text1",
        Text = "※ " + text1,
        Class = Model.Properties.Class,
        Id = Model.Properties.Id
    });

    Html.RenderPartial("InlineEditors/TextEditor", new TextEditorViewModel
    {
        PropertyName = "Text2",
        Text = "※ " + text2,
        Class = Model.Properties.Class,
        Id = Model.Properties.Id
    });

    Html.RenderPartial("InlineEditors/TextEditor", new TextEditorViewModel
    {
        PropertyName = "Text3",
        Text = "※ " + text3,
        Class = Model.Properties.Class,
        Id = Model.Properties.Id
    });

    Html.RenderPartial("InlineEditors/TextEditor", new TextEditorViewModel
    {
        PropertyName = "Text4",
        Text = "※ " + text4,
        Class = Model.Properties.Class,
        Id = Model.Properties.Id
    });

    Html.RenderPartial("InlineEditors/TextEditor", new TextEditorViewModel
    {
        PropertyName = "Text5",
        Text = "※ " + text5,
        Class = Model.Properties.Class,
        Id = Model.Properties.Id
    });

    Html.RenderPartial("InlineEditors/TextEditor", new TextEditorViewModel
    {
        PropertyName = "Text6",
        Text = "※ " + text6,
        Class = Model.Properties.Class,
        Id = Model.Properties.Id
    });

    Html.RenderPartial("InlineEditors/TextEditor", new TextEditorViewModel
    {
        PropertyName = "Text7",
        Text = "※ " + text7,
        Class = Model.Properties.Class,
        Id = Model.Properties.Id
    });

    Html.RenderPartial("InlineEditors/TextEditor", new TextEditorViewModel
    {
        PropertyName = "Text8",
        Text = "※ " + text8,
        Class = Model.Properties.Class,
        Id = Model.Properties.Id
    });

    Html.RenderPartial("InlineEditors/TextEditor", new TextEditorViewModel
    {
        PropertyName = "Text9",
        Text = "※ " + text9,
        Class = Model.Properties.Class,
        Id = Model.Properties.Id
    });

    Html.RenderPartial("InlineEditors/TextEditor", new TextEditorViewModel
    {
        PropertyName = "Text10",
        Text = "※ " + text10,
        Class = Model.Properties.Class,
        Id = Model.Properties.Id
    });
}
else
{
    <ul class="@leftFootClass @Model.Properties.Class" id="@Model.Properties.Id">
        <li>@text1</li>
        <li>@text2</li>
        <li>@text3</li>
        <li>@text4</li>
        <li>@text5</li>
        <li>@text6</li>
        <li>@text7</li>
        <li>@text8</li>
        <li>@text9</li>
        <li>@text10</li>
    </ul>
}