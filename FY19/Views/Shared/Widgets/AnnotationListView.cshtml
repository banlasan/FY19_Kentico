@using Kentico.PageBuilder.Web.Mvc
@using FY19.Models.Widgets
@using FY19.Models.InlineEditors
@using System.Text.RegularExpressions;
@model ComponentViewModel<KMJ_AnnotationListProperties>


@functions
{
    private static string HtmlToPlainText(string html)
    {
        const string tagWhiteSpace = @"(>|$)(\W|\n|\r)+<";//matches one or more (white space or line breaks) between '>' and '<'
        const string stripFormatting = @"<[^>]*(>|$)";//match any character between '<' and '>', even when end tag is missing
        const string lineBreak = @"<(br|BR)\s{0,1}\/{0,1}>";//matches: <br>,<br/>,<br />,<BR>,<BR/>,<BR />
        var lineBreakRegex = new Regex(lineBreak, RegexOptions.Multiline);
        var stripFormattingRegex = new Regex(stripFormatting, RegexOptions.Multiline);
        var tagWhiteSpaceRegex = new Regex(tagWhiteSpace, RegexOptions.Multiline);

        var text = html;
        //Decode html specific characters
        text = System.Net.WebUtility.HtmlDecode(text);
        //Remove tag whitespace/line breaks
        text = tagWhiteSpaceRegex.Replace(text, "><");
        //Replace <br /> with line breaks
        text = lineBreakRegex.Replace(text, Environment.NewLine);
        //Strip formatting
        text = stripFormattingRegex.Replace(text, string.Empty);

        return text;
    }
}

@{
    string leftFootClass = string.Empty;
    string text1 = "test", text2 = string.Empty, text3 = string.Empty, text4 = string.Empty, text5 = string.Empty, text6 = string.Empty, text7 = string.Empty, text8 = string.Empty, text9 = string.Empty, text10 = string.Empty;

    if (Model.Properties.Count == "none")
    { leftFootClass = "listFootNote001"; }
    else
    { leftFootClass = "listFootNote002"; }

    if (Model.Properties.Text1 != null)
    {
        string tmpText = HtmlToPlainText(Model.Properties.Text1.Replace("※", string.Empty));

        text1 = tmpText.Length > 1000 ? tmpText.Substring(0, 1000) : tmpText;
    }
    else { text1 = Model.Properties.Text1; }

    if (Model.Properties.Text2 != null)
    {
        string tmpText = HtmlToPlainText(Model.Properties.Text2.Replace("※", string.Empty));

        text2 = tmpText.Length > 1000 ? tmpText.Substring(0, 1000) : tmpText;
    }
    else { text2 = Model.Properties.Text2; }

    if (Model.Properties.Text3 != null)
    {
        string tmpText = HtmlToPlainText(Model.Properties.Text3.Replace("※", string.Empty));

        text3 = tmpText.Length > 1000 ? tmpText.Substring(0, 1000) : tmpText;
    }
    else { text3 = Model.Properties.Text3; }

    if (Model.Properties.Text4 != null)
    {
        string tmpText = HtmlToPlainText(Model.Properties.Text4.Replace("※", string.Empty));

        text4 = tmpText.Length > 1000 ? tmpText.Substring(0, 1000) : tmpText;
    }
    else { text4 = Model.Properties.Text4; }

    if (Model.Properties.Text5 != null)
    {
        string tmpText = HtmlToPlainText(Model.Properties.Text5.Replace("※", string.Empty));

        text5 = tmpText.Length > 1000 ? tmpText.Substring(0, 1000) : tmpText;
    }
    else { text5 = Model.Properties.Text5; }

    if (Model.Properties.Text6 != null)
    {
        string tmpText = HtmlToPlainText(Model.Properties.Text6.Replace("※", string.Empty));

        text6 = tmpText.Length > 1000 ? tmpText.Substring(0, 1000) : tmpText;
    }
    else { text6 = Model.Properties.Text6; }

    if (Model.Properties.Text7 != null)
    {
        string tmpText = HtmlToPlainText(Model.Properties.Text7.Replace("※", string.Empty));

        text7 = tmpText.Length > 1000 ? tmpText.Substring(0, 1000) : tmpText;
    }
    else { text7 = Model.Properties.Text7; }

    if (Model.Properties.Text8 != null)
    {
        string tmpText = HtmlToPlainText(Model.Properties.Text8.Replace("※", string.Empty));

        text8 = tmpText.Length > 1000 ? tmpText.Substring(0, 1000) : tmpText;
    }
    else { text8 = Model.Properties.Text8; }

    if (Model.Properties.Text9 != null)
    {
        string tmpText = HtmlToPlainText(Model.Properties.Text9.Replace("※", string.Empty));

        text9 = tmpText.Length > 1000 ? tmpText.Substring(0, 1000) : tmpText;
    }
    else { text9 = Model.Properties.Text9; }

    if (Model.Properties.Text10 != null)
    { 
        string tmpText = HtmlToPlainText(Model.Properties.Text10.Replace("※", string.Empty));

        text10 = tmpText.Length > 1000 ? tmpText.Substring(0, 1000) : tmpText;
    }
    else { text10 = Model.Properties.Text10; }
}


@if (Context.Kentico().PageBuilder().EditMode)
{
    <div class="KMJ_AnnotationList">
        <ul class="@leftFootClass @if (Model.Properties.Id != null) { @Model.Properties.Class; }" id="@Model.Properties.Id">
            @if (text1 != null)
            {<li>@Html.Raw(HttpUtility.HtmlDecode(text1.Replace(Environment.NewLine, "<br/>")))</li>}
            @if (text2 != null)
            {<li>@Html.Raw(HttpUtility.HtmlDecode(text2.Replace(Environment.NewLine, "<br/>")))</li>}
            @if (text3 != null)
            {<li>@Html.Raw(HttpUtility.HtmlDecode(text3.Replace(Environment.NewLine, "<br/>")))</li>}
            @if (text4 != null)
            {<li>@Html.Raw(HttpUtility.HtmlDecode(text4.Replace(Environment.NewLine, "<br/>")))</li>}
            @if (text5 != null)
            {<li>@Html.Raw(HttpUtility.HtmlDecode(text5.Replace(Environment.NewLine, "<br/>")))</li>}
            @if (text6 != null)
            {<li>@Html.Raw(HttpUtility.HtmlDecode(text6.Replace(Environment.NewLine, "<br/>")))</li>}
            @if (text7 != null)
            {<li>@Html.Raw(HttpUtility.HtmlDecode(text7.Replace(Environment.NewLine, "<br/>")))</li>}
            @if (text8 != null)
            {<li>@Html.Raw(HttpUtility.HtmlDecode(text8.Replace(Environment.NewLine, "<br/>")))</li>}
            @if (text9 != null)
            {<li>@Html.Raw(HttpUtility.HtmlDecode(text9.Replace(Environment.NewLine, "<br/>")))</li>}
            @if (text10 != null)
            {<li>@Html.Raw(HttpUtility.HtmlDecode(text10.Replace(Environment.NewLine, "<br/>")))</li>}
        </ul>
    </div>
}
else
{
    <ul class="@leftFootClass @if (Model.Properties.Id != null) { @Model.Properties.Class; }" id="@Model.Properties.Id">
        @if (text1 != null)
        {<li>@Html.Raw(HttpUtility.HtmlDecode(text1.Replace(Environment.NewLine, "<br/>")))</li>}
        @if (text2 != null)
        {<li>@Html.Raw(HttpUtility.HtmlDecode(text2.Replace(Environment.NewLine, "<br/>")))</li>}
        @if (text3 != null)
        {<li>@Html.Raw(HttpUtility.HtmlDecode(text3.Replace(Environment.NewLine, "<br/>")))</li>}
        @if (text4 != null)
        {<li>@Html.Raw(HttpUtility.HtmlDecode(text4.Replace(Environment.NewLine, "<br/>")))</li>}
        @if (text5 != null)
        {<li>@Html.Raw(HttpUtility.HtmlDecode(text5.Replace(Environment.NewLine, "<br/>")))</li>}
        @if (text6 != null)
        {<li>@Html.Raw(HttpUtility.HtmlDecode(text6.Replace(Environment.NewLine, "<br/>")))</li>}
        @if (text7 != null)
        {<li>@Html.Raw(HttpUtility.HtmlDecode(text7.Replace(Environment.NewLine, "<br/>")))</li>}
        @if (text8 != null)
        {<li>@Html.Raw(HttpUtility.HtmlDecode(text8.Replace(Environment.NewLine, "<br/>")))</li>}
        @if (text9 != null)
        {<li>@Html.Raw(HttpUtility.HtmlDecode(text9.Replace(Environment.NewLine, "<br/>")))</li>}
        @if (text10 != null)
        {<li>@Html.Raw(HttpUtility.HtmlDecode(text10.Replace(Environment.NewLine, "<br/>")))</li>}
    </ul>
}