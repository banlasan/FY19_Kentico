@using Kentico.PageBuilder.Web.Mvc
@using FY19.Models.Widgets
@using FY19.Models.InlineEditors
@using System.Text.RegularExpressions;
@model ComponentViewModel<KMJ_HeadHTMLProperties>

@functions
{
    private static string HtmlToPlainText(string html)
    {
        const string tagWhiteSpace = @"(>|$)(\W|\n|\r)+<";//matches one or more (white space or line breaks) between '>' and '<'
        const string stripFormatting = @"<[^>]*(>|$)";//match any character between '<' and '>', even when end tag is missing
        const string lineBreak = @"<(br|BR)\s{0,1}\/{0,1}>";//matches: <br>,<br/>,<br />,<BR>,<BR/>,<BR />
        var lineBreakRegex = new Regex(lineBreak, RegexOptions.Multiline);
        var stripFormattingRegex = new Regex(stripFormatting, RegexOptions.Multiline);
        var tagWhiteSpaceRegex = new Regex(tagWhiteSpace, RegexOptions.Multiline);

        var text = html;
        //Decode html specific characters
        text = System.Net.WebUtility.HtmlDecode(text);
        //Remove tag whitespace/line breaks
        text = tagWhiteSpaceRegex.Replace(text, "><");
        //Replace <br /> with line breaks
        text = lineBreakRegex.Replace(text, Environment.NewLine);
        //Strip formatting
        text = stripFormattingRegex.Replace(text, string.Empty);

        return text;
    }
}

@{
    string headText = string.Empty;

    if (Model.Properties.HeadTags != null)
    {
        headText = Model.Properties.HeadTags;

        if (headText.Contains("</script>"))
        {
            //replace script end tag
            //HTML parser doesn't recognize Javascript strings or nested <script> tags
            headText = headText.Replace("</script>", "<\\/script>");
        }

        if (headText.Contains("\""))
        {
            //use escape keys for HTML parser since it doesn't recognize Javascript strings with quotes
            headText = headText.Replace("\"", "\\\"");
        }
    }

    var myHtmlString = new HtmlString(headText.Replace("\n", "").Replace("\r", "").Replace("\t", ""));
}

@if (Context.Kentico().PageBuilder().EditMode)
{
    <div>
        Scripts are hidden. Inspect element inside head tag...
    </div>

    <script type="text/javascript">
        window.onload = function () {
            console.log("Scripts inserted to head tag.");
            document.head.innerHTML += "@myHtmlString";
    };
    </script>
}
else
{
    <script type="text/javascript">
        window.onload = function () {
            console.log("Scripts inserted to head tag.");
            document.head.innerHTML += "@myHtmlString";
    };
    </script>
}