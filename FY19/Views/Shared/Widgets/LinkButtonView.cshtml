@using Kentico.PageBuilder.Web.Mvc
@using FY19.Models.Widgets
@using FY19.Models.InlineEditors
@using System.Text.RegularExpressions;

@model ComponentViewModel<KMJ_LinkButtonProperties>

@functions
{
    private static string HtmlToPlainText(string html)
    {
        const string tagWhiteSpace = @"(>|$)(\W|\n|\r)+<";//matches one or more (white space or line breaks) between '>' and '<'
        const string stripFormatting = @"<[^>]*(>|$)";//match any character between '<' and '>', even when end tag is missing
        const string lineBreak = @"<(br|BR)\s{0,1}\/{0,1}>";//matches: <br>,<br/>,<br />,<BR>,<BR/>,<BR />
        var lineBreakRegex = new Regex(lineBreak, RegexOptions.Multiline);
        var stripFormattingRegex = new Regex(stripFormatting, RegexOptions.Multiline);
        var tagWhiteSpaceRegex = new Regex(tagWhiteSpace, RegexOptions.Multiline);

        var text = html;
        //Decode html specific characters
        text = System.Net.WebUtility.HtmlDecode(text);
        //Remove tag whitespace/line breaks
        text = tagWhiteSpaceRegex.Replace(text, "><");
        //Replace <br /> with line breaks
        text = lineBreakRegex.Replace(text, Environment.NewLine);
        //Strip formatting
        text = stripFormattingRegex.Replace(text, string.Empty);

        return text;
    }
}

@{
    string textContent = string.Empty, url = string.Empty;
    string tBlank = string.Empty;
    string thisId = string.Empty;

    if (Model.Properties.TextContent != null)
    {
        string tmpTxtContent = HtmlToPlainText(Model.Properties.TextContent.Replace("Label:", ""));

        textContent = tmpTxtContent.Length > 200 ? tmpTxtContent.Substring(0, 200) : tmpTxtContent;
    }
    else
    {
        textContent = Model.Properties.TextContent;
    }

    if (Model.Properties.Url != null)
    {
        string tmpUrl = HtmlToPlainText(Model.Properties.Url.Replace("URL: https://", ""));
        url = tmpUrl.Length > 992 ? tmpUrl.Substring(0, 992) : tmpUrl;
    }
    else
    {
        url = Model.Properties.Url;
    }

    if (Model.Properties.Blank)
    {
        tBlank = "target=_blank";
    }

    if (Model.Properties.Id != null)
    {
        thisId = "id = " + Model.Properties.Id.Replace(" ", "");
    }
}

<div class="KMJ_LinkButton">
    <div class="btn btn001 @if (Model.Properties.Id != null) { @Model.Properties.Class; }" @if (Model.Properties.Id != null) { @thisId }>
        <a href="https://@url" @if (Model.Properties.Blank) { @tBlank }>
            @if (textContent != null)
            {@Html.Raw(HttpUtility.HtmlDecode(textContent.Replace(Environment.NewLine, "<br/>")))}
        </a>
    </div>
</div>